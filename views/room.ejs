<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>WebRTC Video Meeting with Object Detection</title>

    <script>
        const roomid="<%= roomId %>";
        
        // Check if running on HTTPS (required for camera access)
        if (location.protocol !== 'https:' && location.hostname !== 'localhost') {
            alert('Camera access requires HTTPS. Please use ngrok or a secure connection.')
        }
    </script>

    <script src="https://unpkg.com/peerjs@1.5.5/dist/peerjs.min.js" defer></script>
    <script src="https://cdn.socket.io/4.7.2/socket.io.min.js" defer></script>

    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd"></script>

    <script src="metrics.js" defer></script>
    <script src="script.js" defer></script>
    <script src="detect.js" defer></script>
 
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap');

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: #1a1a1a;
            color: white;
            margin: 0;
            padding: 0;
        }

        .header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 1000;
            background: rgba(0,0,0,0.9);
            padding: 10px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .status {
            background: rgba(0,0,0,0.8);
            padding: 8px 15px;
            border-radius: 5px;
            font-size: 14px;
            color: #4CAF50;
        }

        .connection-info {
            background: rgba(0,0,0,0.8);
            padding: 8px 15px;
            border-radius: 5px;
            font-size: 14px;
            color: #2196F3;
        }

        .debug-info {
            position: fixed;
            bottom: 20px;
            left: 20px;
            background: rgba(0,0,0,0.8);
            padding: 10px 15px;
            border-radius: 5px;
            font-size: 10px;
            z-index: 100;
            max-width: 300px;
            word-wrap: break-word;
        }

        .main-content {
            margin-top: 80px;
            padding: 20px;
        }

        .object-detection-section {
            text-align: center;
            margin-bottom: 30px;
        }

        .object-detection-section h1 {
            color: #4CAF50;
            margin-bottom: 10px;
            font-size: 2rem;
        }

        .detection-subtitle {
            color: #888;
            font-size: 1rem;
            margin-bottom: 20px;
            font-weight: normal;
        }

        .container {
            position: relative;
            max-width: 90%;
            width: 720px;
            height: auto;
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.15);
            background-color: #2a2a2a;
            margin: 0 auto;
        }

        .detection-video {
            display: block;
            width: 100%;
            height: auto;
            border-radius: 12px;
        }

        .detection-canvas {
            position: absolute;
            top: 0;
            left: 0;
            z-index: 10;
        }

        .message-box {
            background-color: #ffedc7;
            color: #a05a00;
            padding: 15px;
            margin-top: 20px;
            border-radius: 8px;
            border: 1px solid #ffcc80;
            display: none;
        }

        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 2s linear infinite;
            margin-top: 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .metrics-section {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            padding: 20px;
            margin: 20px 0;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .metrics-section h2 {
            color: #FF9800;
            margin-bottom: 15px;
            font-size: 1.3rem;
            text-align: center;
        }

        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .metric-card {
            background: rgba(0, 0, 0, 0.3);
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #FF9800;
        }

        .metric-label {
            font-size: 12px;
            color: #ccc;
            margin-bottom: 5px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .metric-value {
            font-size: 18px;
            font-weight: bold;
            color: #FF9800;
        }

        .metrics-actions {
            text-align: center;
            display: flex;
            gap: 10px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .metrics-btn {
            background: #FF9800;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            transition: background 0.3s;
        }

        .metrics-btn:hover {
            background: #F57C00;
        }

        .metrics-btn.secondary {
            background: #666;
        }

        .metrics-btn.secondary:hover {
            background: #555;
        }

        .connected-user-section {
            text-align: center;
            margin-top: 30px;
        }

        .connected-user-section h2 {
            color: #2196F3;
            margin-bottom: 20px;
            font-size: 1.5rem;
        }

        .no-users-message {
            background: rgba(255, 255, 255, 0.1);
            padding: 40px;
            border-radius: 12px;
            border: 2px dashed rgba(255, 255, 255, 0.3);
            color: rgba(255, 255, 255, 0.7);
            font-size: 1.1rem;
        }

        #video-grid {
            display: grid;
            grid-template-columns: 1fr;
            grid-auto-rows: 400px;
            gap: 20px;
            margin-top: 20px;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }

        .video-container {
            position: relative;
            border-radius: 8px;
            overflow: hidden;
            background: #2a2a2a;
            border: 2px solid #2196F3;
            box-shadow: 0 4px 15px rgba(33, 150, 243, 0.3);
        }

        .video-container video {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: block;
        }

        .video-label {
            position: absolute;
            bottom: 10px;
            left: 10px;
            background: rgba(33, 150, 243, 0.9);
            color: white;
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: bold;
            z-index: 10;
        }

        .frame-log-section {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            padding: 20px;
            margin: 20px 0;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .frame-log-section h2 {
            color: #FF9800;
            margin-bottom: 15px;
            font-size: 1.3rem;
            text-align: center;
        }

        .frame-log-controls {
            text-align: center;
            margin-bottom: 15px;
        }

        .logging-status {
            font-size: 14px;
            color: #FF9800;
        }

        .frame-log-container {
            max-height: 400px;
            overflow-y: auto;
            background: #2a2a2a;
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 10px;
        }

        .frame-log-placeholder {
            color: #888;
            font-style: italic;
            text-align: center;
            padding: 20px;
        }

        .frame-log-entry {
            background: rgba(0, 0, 0, 0.3);
            padding: 8px 12px;
            border-radius: 5px;
            margin-bottom: 5px;
            font-size: 12px;
            color: #ccc;
            border-left: 3px solid #FF9800;
            transition: background 0.2s;
        }

        .frame-log-entry:hover {
            background: rgba(0, 0, 0, 0.5);
        }

        .frame-log-entry strong {
            color: #FF9800;
            margin-right: 8px;
        }

        @media (max-width: 768px) {
            .header {
                padding: 8px 15px;
            }

            .status, .connection-info {
                font-size: 12px;
                padding: 6px 12px;
            }

            .metrics-grid {
                grid-template-columns: 1fr;
                gap: 10px;
            }

            .metrics-actions {
                flex-direction: column;
                align-items: center;
            }

            #video-grid {
                grid-auto-rows: 300px;
                gap: 15px;
                margin: 15px;
            }

            .video-label {
                font-size: 12px;
                padding: 6px 12px;
            }

            .debug-info {
                font-size: 8px;
                max-width: 250px;
            }

            .no-users-message {
                padding: 30px 20px;
                font-size: 1rem;
            }

            .object-detection-section h1 {
                font-size: 1.5rem;
            }

            .detection-subtitle {
                font-size: 0.9rem;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="status" id="status">Connecting...</div>
        <div class="connection-info" id="connection-info">Users: 0</div>
    </div>

    <div class="debug-info" id="debug-info">Debug: Initializing...</div>

    <div class="main-content">
        <div class="object-detection-section">
            <h1>Object Detection</h1>
            <div class="detection-subtitle" id="detection-subtitle">Running on your camera</div>
            <div class="loader" id="loader"></div>
            <div class="message-box" id="message-box"></div>
            <div class="container">
                <video id="video" class="detection-video" playsinline autoplay></video>
                <canvas id="canvas" class="detection-canvas"></canvas>
            </div>
        </div>

        <div class="metrics-section">
            <h2>Performance Metrics</h2>
            <div class="metrics-grid">
                <div class="metric-card">
                    <div class="metric-label">Current FPS</div>
                    <div class="metric-value" id="current-fps">0</div>
                </div>
                <div class="metric-card">
                    <div class="metric-label">Total Frames</div>
                    <div class="metric-value" id="total-frames">0</div>
                </div>
                <div class="metric-card">
                    <div class="metric-label">Total Detections</div>
                    <div class="metric-value" id="total-detections">0</div>
                </div>
                <div class="metric-card">
                    <div class="metric-label">E2E Latency (P95)</div>
                    <div class="metric-value" id="e2e-latency-p95">0ms</div>
                </div>
                <div class="metric-card">
                    <div class="metric-label">Server Latency (P95)</div>
                    <div class="metric-value" id="server-latency-p95">0ms</div>
                </div>
                <div class="metric-card">
                    <div class="metric-label">Network Latency (P95)</div>
                    <div class="metric-value" id="network-latency-p95">0ms</div>
                </div>
            </div>
            <div class="metrics-actions">
                <button class="metrics-btn" onclick="downloadMetrics()">Download Metrics</button>
                <button class="metrics-btn" onclick="downloadFrameLogs()">Download Frame Logs</button>
                <button class="metrics-btn secondary" onclick="resetMetrics()">Reset Metrics</button>
                <button class="metrics-btn secondary" onclick="showMetrics()">Show Raw Data</button>
                <button class="metrics-btn secondary" onclick="toggleFrameLogging()">Toggle Logging</button>
            </div>
        </div>

        <div class="frame-log-section">
            <h2>Frame-by-Frame Detection Log</h2>
            <div class="frame-log-controls">
                <span class="logging-status" id="logging-status">Frame logging: ENABLED</span>
            </div>
            <div class="frame-log-container" id="frame-log">
                <div class="frame-log-placeholder">Waiting for detections...</div>
            </div>
        </div>

        <div class="connected-user-section">
            <h2>Connected User</h2>
            <div id="video-grid">
                <div class="no-users-message" id="no-users-message">
                    Waiting for users to connect...
                </div>
            </div>
        </div>
    </div>

    <script>
        // Update metrics display every second
        function updateMetricsDisplay() {
            if (window.metricsCollector) {
                const metrics = window.metricsCollector.calculateMetrics();
                
                document.getElementById('current-fps').textContent = metrics.currentFPS || 0;
                document.getElementById('total-frames').textContent = metrics.totalFrames || 0;
                document.getElementById('total-detections').textContent = metrics.totalDetections || 0;
                
                if (metrics.e2eLatency) {
                    document.getElementById('e2e-latency-p95').textContent = `${Math.round(metrics.e2eLatency.p95)}ms`;
                }
                
                if (metrics.serverLatency) {
                    document.getElementById('server-latency-p95').textContent = `${Math.round(metrics.serverLatency.p95)}ms`;
                }
                
                if (metrics.networkLatency) {
                    document.getElementById('network-latency-p95').textContent = `${Math.round(metrics.networkLatency.p95)}ms`;
                }
            }
        }

        // Download metrics as JSON file
        function downloadMetrics() {
            if (window.metricsCollector) {
                window.metricsCollector.downloadMetrics();
            }
        }

        // Download frame-by-frame detection logs
        function downloadFrameLogs() {
            if (window.metricsCollector) {
                window.metricsCollector.downloadFrameLogs();
            }
        }

        // Reset metrics
        function resetMetrics() {
            if (window.metricsCollector) {
                window.metricsCollector.reset();
                updateMetricsDisplay();
                
                // Clear frame log display
                const frameLogElement = document.getElementById('frame-log');
                if (frameLogElement) {
                    frameLogElement.innerHTML = '<div class="frame-log-placeholder">Waiting for detections...</div>';
                }
            }
        }

        // Show raw metrics data
        function showMetrics() {
            if (window.metricsCollector) {
                const metrics = window.metricsCollector.exportMetrics();
                console.log('Raw Metrics Data:', JSON.parse(metrics));
                alert('Metrics data logged to console. Check browser console for details.');
            }
        }

        // Toggle frame logging
        function toggleFrameLogging() {
            if (window.metricsCollector) {
                const isEnabled = window.metricsCollector.toggleFrameLogging();
                const statusElement = document.getElementById('logging-status');
                if (statusElement) {
                    statusElement.textContent = `Frame logging: ${isEnabled ? 'ENABLED' : 'DISABLED'}`;
                    statusElement.style.color = isEnabled ? '#FF9800' : '#666';
                }
            }
        }

        // Update frame log display
        function updateFrameLogDisplay() {
            if (window.metricsCollector) {
                const isEnabled = window.metricsCollector.getFrameLoggingStatus();
                const statusElement = document.getElementById('logging-status');
                if (statusElement) {
                    statusElement.textContent = `Frame logging: ${isEnabled ? 'ENABLED' : 'DISABLED'}`;
                    statusElement.style.color = isEnabled ? '#FF9800' : '#666';
                }
            }
        }

        // Update metrics display every second
        setInterval(updateMetricsDisplay, 1000);
        
        // Update frame log status every 5 seconds
        setInterval(updateFrameLogDisplay, 5000);
    </script>
</body>
</html>